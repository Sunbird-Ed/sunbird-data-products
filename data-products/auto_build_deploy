@Library('deploy-conf') _ 
node('build-slave') {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"
        ansiColor('xterm') {
            stage('Checkout') {
                tag_name = env.JOB_NAME.split("/")[-1]
                pre_checks()
                cleanWs()
                def scmVars = checkout scm
                checkout scm: [$class: 'GitSCM', branches: [[name: "refs/tags/$tag_name"]], userRemoteConfigs: [[url: scmVars.GIT_URL]]]
                commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                artifact_version = tag_name + "_" + commit_hash
                echo "artifact_version: "+ artifact_version
            }
        }
   //     stage Pre-Build
            sh '''
                #sed -i "s/'replication_factor': '2'/'replication_factor': '1'/g" scripts/database/data.cql
                '''
        
 //       stage Build
            sh '''
                cd data-products
                export JAVA_HOME=/usr/lib/jvm/jdk-11.0.2
                export PATH=$JAVA_HOME/bin:$PATH
                echo $(java -version)
                mvn clean install -DskipTests
                '''
 
  //      stage Archive artifacts
            sh """
                mkdir lpa_dp_artifacts
                cp ./data-products/target/data-products-1.0-distribution.tar.gz lpa_dp_artifacts
                zip -j lpa_dp_artifacts.zip:${artifact_version} lpa_dp_artifacts/*
            """
            archiveArtifacts artifacts: "lpa_dp_artifacts.zip:${artifact_version}", fingerprint: true, onlyIfSuccessful: true
            sh """echo {\\"artifact_name\\" : \\"lpa_dp_artifacts.zip\\", \\"artifact_version\\" : \\"${artifact_version}\\", \\"node_name\\" : \\"${env.NODE_NAME}\\"} > metadata.json"""
            archiveArtifacts artifacts: 'metadata.json', onlyIfSuccessful: true
            currentBuild.description = artifact_version
        
        currentBuild.result = "SUCCESS"    
        slack_notify(currentBuild.result, tag_name)
        email_notify()  
        auto_build_deploy()
    }
    catch (err) {
        currentBuild.result = "FAILURE"
        slack_notify(currentBuild.result, tag_name)
        email_notify()
        throw err
    }
}
